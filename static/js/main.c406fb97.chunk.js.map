{"version":3,"sources":["App.js","card/CountdownCard.js","reportWebVitals.js","index.js"],"names":["App","dataFormat","useState","eventData","setEventData","timer","setTimer","lastUpdated","setLastUpdated","version","setVersion","useEffect","fetch","then","r","json","encJson","JSON","parse","hash","decipher","crypto","createDecipheriv","Buffer","from","iv","concat","update","content","final","toString","decrypt","decompressed","decompress","_","chain","events","map","event","startDate","moment","utc","start_time","endDate","end_time","orderBy","value","Date","setInterval","clearInterval","className","index","diff","event_name","local","format","CountdownCard","displayFormat","totalSecondsLeft","duration","asSeconds","totalHoursLeft","asHours","secondsLeft","Math","floor","minsLeft","hoursLeft","daysLeft","totalSecondsToEnd","totalHoursToEnd","secondsToEnd","minsToEnd","hoursToEnd","daysToEnd","inProgress","padZero","number","padStart","showEnd","link","href","alt","src","icon_src","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c406fb97.chunk.js","sourcesContent":["import moment from 'moment';\r\nimport React, { useState, useEffect } from 'react';\r\nimport CountdownCard from './card/CountdownCard';\r\nimport _ from 'lodash';\r\nimport { decompress } from 'compress-json';\r\nimport crypto from 'crypto';\r\n\r\nimport './App.css';\r\n\r\nconst algorithm = 'aes-256-ctr';\r\nconst secretKey = 'vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3';\r\n\r\nconst decrypt = (hash) => {\r\n  const decipher = crypto.createDecipheriv(algorithm, secretKey, Buffer.from(hash.iv, 'hex'));\r\n  return Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]).toString();\r\n};\r\n\r\nfunction App() {\r\n  const displayFormat = 'YYYY MMM DD hh:mm:ss a';\r\n\r\n  const dataFormat = 'YYYY/MM/DD hh:mm:ss';\r\n\r\n  const [eventData, setEventData] = useState([]);\r\n  const [timer, setTimer] = useState(0);\r\n  const [lastUpdated, setLastUpdated] = useState();\r\n  const [version, setVersion] = useState();\r\n\r\n  useEffect(() => {\r\n    fetch('data/data.json')\r\n      .then((r) => r.json())\r\n      .then((encJson) => {\r\n        const json = JSON.parse(decrypt(encJson));\r\n        const decompressed = decompress(json);\r\n        const eventData = _.chain(decompressed.events)\r\n          .map(event => {\r\n            const startDate = moment.utc(event.start_time, dataFormat)\r\n            const endDate = moment.utc(event.end_time, dataFormat)\r\n            return { ...event, startDate, endDate }\r\n          })\r\n          .orderBy(event => new moment(event.startDate))\r\n          .value();\r\n\r\n        setLastUpdated(moment(Date.parse(decompressed.lastUpdated)))\r\n        setVersion(decompressed.version)\r\n        setEventData(eventData)\r\n      });\r\n\r\n    const timer = setInterval(() => {\r\n      setTimer(1);\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimer(0);\r\n  }, [timer]);\r\n\r\n  const content = (\r\n    <div className='card-container'>\r\n      {\r\n        eventData.map((event, index) => {\r\n          const endDate = moment.utc(event.end_time, dataFormat)\r\n          return (endDate.diff(moment()) > 0) ? <CountdownCard key={`${event.event_name}-${index}`} event={event} /> : null;\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n  return (\r\n    <div className=\"App\">\r\n      {content}\r\n      {lastUpdated && (<div>Last updated: {lastUpdated.local().format(displayFormat)}</div>)}\r\n      {version && (<div>Version: {version}</div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import moment from 'moment';\r\nimport { Fragment } from 'react';\r\n\r\nconst CountdownCard = ({ event }) => {\r\n    const displayFormat = 'YYYY MMM DD hh:mm:ss a';\r\n\r\n    const startDate = event.startDate;\r\n    const endDate = event.endDate;\r\n    const totalSecondsLeft = moment.duration(startDate.diff(moment())).asSeconds();\r\n    const totalHoursLeft = moment.duration(startDate.diff(moment())).asHours();\r\n    const secondsLeft = Math.floor(totalSecondsLeft) % 60;\r\n    const minsLeft = Math.floor(totalSecondsLeft / 60 % 60);\r\n    const hoursLeft = Math.floor(totalSecondsLeft / 60 / 60 % 24);\r\n    const daysLeft = Math.floor(totalSecondsLeft / 60 / 60 / 24);\r\n\r\n    const totalSecondsToEnd = moment.duration(endDate.diff(moment())).asSeconds();\r\n    const totalHoursToEnd = moment.duration(endDate.diff(moment())).asHours();\r\n    const secondsToEnd = Math.floor(totalSecondsToEnd) % 60;\r\n    const minsToEnd = Math.floor(totalSecondsToEnd / 60 % 60);\r\n    const hoursToEnd = Math.floor(totalSecondsToEnd / 60 / 60 % 24);\r\n    const daysToEnd = Math.floor(totalSecondsToEnd / 60 / 60 / 24);\r\n\r\n    const inProgress = totalSecondsLeft <= 0;\r\n    const padZero = (number) => `${number}`.padStart(2, '0');\r\n    const showEnd = !(event.start_time === event.end_time);\r\n\r\n    return (\r\n        <div className={`countdown-card ${(inProgress) ? 'active' : ''}`}>\r\n            <div className='icon'>\r\n                {(event.link) ?\r\n                    <a href={event.link} >\r\n                        <img alt={event.event_name} src={`icons/${event.icon_src}.png`} />\r\n                    </a>\r\n                    : <img alt={event.event_name} src={`icons/${event.icon_src}.png`} />\r\n                }\r\n            </div>\r\n            <div className='info'>\r\n                <div className='title'>{event.event_name}</div>\r\n                <div className='countdown'>\r\n                    {(inProgress) ?\r\n                        <div className='subtitle'>--In progress--</div>\r\n                        :\r\n                        <Fragment><div className='subtitle'>Starts in</div><div>{`${daysLeft} days ${padZero(hoursLeft)}:${padZero(minsLeft)}:${padZero(secondsLeft)} (${parseInt(totalHoursLeft)} hours)`} </div></Fragment>\r\n                    }\r\n                    {showEnd && <Fragment><div className='subtitle'>Ends in</div><div>{`${daysToEnd} days ${padZero(hoursToEnd)}:${padZero(minsToEnd)}:${padZero(secondsToEnd)} (${parseInt(totalHoursToEnd)} hours)`}</div></Fragment>}\r\n                </div>\r\n                <div className='date'>\r\n                    <div >Start Date: {startDate.local().format(displayFormat)}</div>\r\n                    {showEnd && <div >End Date: {endDate.local().format(displayFormat)}</div>}\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CountdownCard;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}